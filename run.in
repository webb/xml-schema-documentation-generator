#!@bash@

. "$HOME"/share/wrtools-core/fail.bash
. "$HOME"/share/wrtools-core/opt_help.bash

number_of_jobs=$(nproc)

#HELP:Options:
#HELP:    --help | -h: print this help
#HELP:    -j ${number of jobs}: run this many jobs in parallel
#HELP:        default = number of processing units available

OPTIND=1
while getopts :hj:-: option
do case "$option" in
       h ) opt_help;;
       j ) printf -v number_of_jobs '%d' "$OPTARG";;
       - ) case "$OPTARG" in
               help ) opt_help;;
               help=* ) fail "Long option \"${OPTARG%%=*}\" has unexpected argument";;
               * ) fail "Unknown long option \"${OPTARG%%=*}\"";;
            esac;;
        '?' ) fail "Unknown short option \"$OPTARG\"";;
        : ) fail "Short option \"$OPTARG\" missing argument";;
        * ) fail_assert "Bad state in getopts (OPTARG=\"$OPTARG\")";;
   esac
done
shift $((OPTIND-1))

#HELP:Default command is "all"
if (( $# == 0 ))
then set -- all
fi

#HELP:Commands:

while (( $# > 0 ))
do
    command=$1
    shift

    case $command in

        #HELP:    help: print this help
        help ) opt_help;;
        
        #HELP:    reconfigure: re-run "configure" with current parameters
        reconfigure )
            exec @srcdir@/configure publish_dir=@publish_dir@ xml_catalog=@xml_catalog@ build_json=@build_json@ link_to_dirs=@link_to_dirs@;;

        #HELP:    d: Build dependencies
        d ) make -j "$number_of_jobs" depend=true;;

        #HELP:    all: build everything
        all )
            "$0" d
            time make -j "$number_of_jobs" all;;
        
        #HELP:    clean-component-html: Remove all the schema component pages
        clean-component-html )
            find build -mindepth 3 -type f -name '*.html' -delete;;

        #HELP:    log: Log all the following commands to log.txt
        #HELP:        e.g., "run log oc nc:PersonType"
        log )
            exec script -a log.txt "$0" -j "$number_of_jobs" "$@";;

        #HELP:    build-component: build a component
        #HELP:        e.g., "run build-component nc:PersonType"
        #HELP:        Option '-c': clean: start by removing built products for the component
        build-component )
            clean=false
            case $1 in
                -c ) clean=true
                     shift;;
            esac
            folder=build/${1%:*}/${1#*:}
            shift
            if [[ $clean = true ]]
            then rm -rf "$folder"
            fi
            component_page=${folder}/index.html
            make -j "$number_of_jobs" "$component_page"
            ;;

        #HELP:    oc: open component: build and open a component page
        #HELP:        e.g., "run oc nc:PersonType"
        oc ) 
            case $1 in
                -c ) nargs=2;;
                * ) nargs=1;;
            esac
            set -- build-component "${@:1:nargs}" oc.open-page "${@:nargs+1}"
            ;;

        oc.open-page )
            open "$component_page";;

        # jv = json validate
        jv )
            rm -f build/json-schema.json build/json-schema-unformatted.json
            make valid
            ;;

        rebuild )
            ./config.status
            make clean
            make depend=true
            make "$@"
            make "$@" install
            shift $#
            ;;
        "continue" )
            ./config.status
            make depend=true
            make "$@"
            make "$@" install
            shift $#
            ;;
        release )
            rm -rf build
            rm -rf .../repo/*
            ./configure install_dir=../repo xml_catalog=../../niem-releases/niem/xml-catalog.xml
            make depend=true
            make -k -j -l 50
            make -k -j -l 50 install
            date
            ;;

        backlinks )
            rm -f build/backlinks.xml
            make build/backlinks.xml
            ;;

        show )
            remove=(rm -rf)
            build=(make -j 8)
            for path in "$@"
            do remove+=( "build/$path" )
               build+=( "build/$path/index.html" )
            done
            "${remove[@]}"
            "${build[@]}"
            if (( $# > 0 ))
            then open "${build[3]}"
            fi
            ;;
        * )
            fail "unknown command \"$command\""
            ;;
    esac
done

#HELP:current parameters:
#HELP:    srcdir=@srcdir@
#HELP:    publish_dir=@publish_dir@
#HELP:    xml_catalog=@xml_catalog@
#HELP:    build_json=@build_json@
#HELP:    link_to_dirs=@link_to_dirs@


# Local Variables:
# mode: shell-script
# eval: (sh-set-shell "bash")
# indent-tabs-mode: nil
# fill-column: 9999
# End:

