#############################################################################
# Don't touch these...
#############################################################################

this_makefile := ${lastword ${MAKEFILE_LIST}}
SHELL = @bash@ -o pipefail -o errexit -o nounset
# all targets are never automatically deleted because they are intermediate
.SECONDARY:
# delete the target of a rule if it has changed and its recipe exits with a
# nonzero exit status
.DELETE_ON_ERROR:

depend = false

#HELP:Default target is "all". Targets include:
.DEFAULT_GOAL = all

#############################################################################
# AUTOCONF inputs

srcdir = @srcdir@
builddir = @builddir@
publish_dir = @publish_dir@
xml_catalog = @xml_catalog@
build_json = @build_json@

#############################################################################
# COMMANDS

# autoconf stuff
MKDIR_P = @MKDIR_P@
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_DATA = @INSTALL_DATA@
SED = @SED@
# unix stuff
find = @find@
touch = @touch@

# get with:
# $ find lib -type f -name '*.jar' | sed -e 's|^|${srcdir}/|' | xargs tokenize-strings --output-separator=: | pbcopy
classpath = ${srcdir}/lib/SaxonHE10-2J/saxon-he-10.2.jar:${srcdir}/lib/SaxonHE10-2J/jline-2.9.jar:${srcdir}/lib/SaxonHE10-2J/saxon-xqj-10.2.jar:${srcdir}/lib/SaxonHE10-2J/saxon-he-test-10.2.jar:${srcdir}/lib/xml-commons-resolver-1.2/resolver.jar

# webb stuff
saxon = java -classpath ${classpath} net.sf.saxon.Transform \
  -catalog:${srcdir}/lib/schema-for-xml-catalog/xml-catalog.xml \
  --suppressXsltNamespaceCheck:on

# additional params to ${saxon}:
#  -s:inputs/empty.xml \
#  -xsl:xsl/mode-component-diagram.xsl \
#  -o:build/nc/PersonType/diagram.dot \
#  -im:"{}component-diagram" \
#  +prefixes-file=./build/prefixes.xml \
#  +xml-catalog-file=./inputs/person-subset/niem/xml-catalog.xml \
#  +backlinks-file=./build/backlinks.xml \
#  root-path=/Users/wr/r/niem/release/model/src/build \
#  prefix=nc \
#  local-name=PersonType

ifeq (${build_json},true)
saxon_build_json_arg = build_json=true
else
saxon_build_json_arg = build_json=false
endif

#############################################################################
# variables

build_dir = ${builddir}/build

prefixes_file = ${build_dir}/prefixes.xml
definitions_mk = ${build_dir}/definitions.mk
backlinks_file = ${build_dir}/backlinks.xml

tokens_dir = ${build_dir}/tokens
built_all_token = ${tokens_dir}/built-all
installed_token = ${tokens_dir}/installed
make_dirs_token = ${tokens_dir}/make-dirs
generate_diagrams_token = ${tokens_dir}/generate-diagrams
process_diagrams_token = ${tokens_dir}/process-diagrams

ifneq (${depend},false)
.DEFAULT_GOAL = depend

.PHONY: depend
depend: ${definitions_mk}

${prefixes_file}: ${xml_catalog} ${srcdir}/xsl/collect-prefixes.xsl
	${MKDIR_P} ${dir $@}
	${saxon} -s:$< -o:$@ -xsl:${srcdir}/xsl/collect-prefixes.xsl

${definitions_mk}: ${xml_catalog} ${prefixes_file}
	${MKDIR_P} ${dir $@}
	${saxon} \
	  -s:${srcdir}/inputs/empty.xml \
	  -o:$@ \
	  -xsl:${srcdir}/xsl/generate-makefile.xsl \
	  +prefixes-file=${prefixes_file} \
	  +xml-catalog-file=${xml_catalog}

else
namespaces =
-include ${definitions_mk}
ifeq (${namespaces},)
${warning Prequisites/dependencies not present. Run "make depend=true"}
endif

define run_install =
${MKDIR_P} ${publish_dir}/$1
${INSTALL_DATA} ${build_dir}/$1/index.html ${publish_dir}/$1/index.html 
endef

define run_build_namespace_index =
${MKDIR_P} ${build_dir}/$1
${saxon} \
  -s:${srcdir}/inputs/empty.xml \
  -o:$@ \
  -xsl:${srcdir}/xsl/generate-namespace-index.xsl \
  +prefixes-file=${prefixes_file} \
  +xml-catalog-file=${xml_catalog} \
  prefix=$1
endef

# example: $1 = nc/PersonType
define run_build_component_index =
${MKDIR_P} ${build_dir}/$1
${saxon} \
  -s:${srcdir}/inputs/empty.xml \
  -o:${build_dir}/$1/index.html \
  -xsl:${srcdir}/xsl/mode-component-page.xsl \
  -im:"{}component-page" \
  +prefixes-file=${prefixes_file} \
  +xml-catalog-file=${xml_catalog} \
  +backlinks-file=${backlinks_file} \
  root-path=${realpath ${build_dir}} \
  prefix=${word 1,${subst /, ,$1}} \
  local-name=${word 2,${subst /, ,$1}} \
  ${saxon_build_json_arg}
endef

all_files = \
  ${build_dir}/default.css \
  ${build_dir}/index.html \
  ${namespaces:%=${build_dir}/%/index.html} \
  ${components:%=${build_dir}/%/index.html}
  ${components:%=${build_dir}/%/diagram.svg}

ifeq (${build_json},true)
all_files += ${build_dir}/json-schema.json
endif

install_files = ${all_files:${build_dir}/%=${publish_dir}/%}

#############################################################################
.PHONY: all #    build everything from $xml_catalog
#HELP:        Default xml_catalog=@xml_catalog@
all: ${all_files}

${backlinks_file}: ${xml_catalog} ${prefixes_file}
	${MKDIR_P} ${dir $@}
	${saxon} -s:$< -o:$@ -xsl:${srcdir}/xsl/collect-backlinks.xsl \
	  +prefixes-file=${prefixes_file} \
	  +xml-catalog-file=${xml_catalog}

${build_dir}/index.html: | ${prefixes_file} ${xml_catalog}
	${MKDIR_P} ${build_dir}
	${saxon} \
	  -s:${srcdir}/inputs/empty.xml \
	  -o:$@ \
	  -xsl:${srcdir}/xsl/generate-root-index.xsl \
	  +prefixes-file=${prefixes_file} \
	  +xml-catalog-file=${xml_catalog} \
	  ${saxon_build_json_arg}

${build_dir}/json-schema-unformatted.json: | ${backlinks_file} ${xml_catalog}
	${saxon} \
	  -s:${srcdir}/inputs/empty.xml \
	  -o:$@ \
	  -xsl:${srcdir}/xsl/generate-json-schema.xsl \
	  +prefixes-file=${prefixes_file} \
	  +xml-catalog-file=${xml_catalog} \
	  +backlinks-file=${backlinks_file}

${build_dir}/json-schema.json: ${build_dir}/json-schema-unformatted.json
	jq . $< > $@

${build_dir}/%/diagram.svg: ${build_dir}/%/diagram.dot
	dot -Tsvg -o${build_dir}/$*/diagram.svg $<

${build_dir}/%/diagram.dot: | ${backlinks_file} ${xml_catalog}
	${MKDIR_P} ${dir $@}
	${saxon} \
	  -s:${srcdir}/inputs/empty.xml \
	  -o:$@ \
	  -xsl:${srcdir}/xsl/mode-component-diagram.xsl \
	  -im:"{}component-diagram" \
	  +prefixes-file=${prefixes_file} \
	  +xml-catalog-file=${xml_catalog} \
	  +backlinks-file=${backlinks_file} \
	  root-path=${realpath ${build_dir}} \
	  prefix=${word 1,${subst /, ,$*}} \
	  local-name=${word 2,${subst /, ,$*}}

#############################################################################
.PHONY: publish #    install everything to $publish_dir
#HELP:        Default publish_dir=@publish_dir@
publish: ${install_files}

${publish_dir}/%: ${build_dir}/%
	${MKDIR_P} ${dir $@}
	${INSTALL_DATA} $< $@

endif

#############################################################################
.PHONY: valid
valid: \
  ${patsubst ${srcdir}/%,${tokens_dir}/xsd-valid/%,${wildcard ${srcdir}/inputs/person/instance-*.xml}} \
  ${patsubst ${srcdir}/%,${tokens_dir}/json-valid/%,${wildcard ${srcdir}/inputs/person/instance-*.json}}

${tokens_dir}/xsd-valid/inputs/person/%.xml: ${srcdir}/inputs/person/%.xml ${srcdir}/inputs/person/subset/niem/xml-catalog.xml
	xs-validate --catalog=${srcdir}/inputs/person/subset/niem/xml-catalog.xml $<
	${MKDIR_P} ${dir $@}
	touch $@

${tokens_dir}/json-valid/inputs/person/%.json: ${srcdir}/inputs/person/%.json ${build_dir}/json-schema.json
	ajv validate -s ${build_dir}/json-schema.json -d $<
	${MKDIR_P} ${dir $@}
	touch $@

#############################################################################
# convenience targets

.PHONY: clean #    clean regular build products
clean:
	${RM} -r ${build_dir}

.PHONY: distclean #    Clean all products
distclean: clean
	${RM} config.log config.status Makefile

#############################################################################
# make help: this must be the last target

.PHONY: help #    Print this help
help:
	@ ${SED} -e '/^\.PHONY:/s/^\.PHONY: *\([^ #]*\) *\#\( *\)\([^ ].*\)/\2\1: \3/p;/^[^#]*#HELP:/s/[^#]*#HELP:\(.*\)/\1/p;d' ${this_makefile}

#HELP:Set variable build_json to 'false' to omit JSON Schema artifacts (default is @build_json@).

# don't put anything after this
